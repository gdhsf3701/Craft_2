//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""LeftPlayer"",
            ""id"": ""c95343cf-245a-44e0-964b-25f6c068a27f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""32905b52-65a1-45f8-9d80-3f1aaecc3688"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9c538328-8c09-4cf4-b7f7-a635e2f3508a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""acdb362f-d137-4c9f-929b-aa52faf1d239"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kick"",
                    ""type"": ""Button"",
                    ""id"": ""665ead19-4b2a-4f9a-8b21-ff5e7690187c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Knife"",
                    ""type"": ""Button"",
                    ""id"": ""a1891814-db30-45b6-9c01-cb99138b3ee7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow"",
                    ""id"": ""e26d31e8-7bff-42b1-b8ed-e0f0fb525402"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""26ae71b8-ea04-446d-b059-bdffa5452fcf"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""05675a0d-ad1e-4219-83f5-46a71787e6d5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f12c1ac8-24d6-4f70-8f0c-0dfe25927b52"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""54e4cca5-9fba-4fa6-b643-8c19e3e5be39"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""144fe66c-0da2-4778-9ac2-facb07dbce5f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bc18b23-453e-4d3c-809a-d5b596a495d7"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb80187e-ec95-4193-8401-60fc5cec202e"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6393fafb-0214-4191-b1ef-014254dc8980"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Knife"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightPlayer"",
            ""id"": ""56ca53f1-e235-4ee5-b995-ec4333785f63"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e276edef-504d-4509-a5f6-ae31864606b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9684775f-ed2e-40a6-9998-8731fda83f4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""68647b3a-da38-40e8-88ea-72a06acb0cca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kick"",
                    ""type"": ""Button"",
                    ""id"": ""8bd62b90-e829-45e9-a228-6ad120b9d9bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Knife"",
                    ""type"": ""Button"",
                    ""id"": ""df2076cb-0ca3-4f6c-9746-a09912bb4954"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""660d5d01-f7f3-41e6-af1c-8954eb9fb387"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ee47dd42-f5e0-4059-9207-97384be4cfb5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e47e8de-9aa4-4b8c-af9c-777961149e63"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fd5d04f2-38c1-4a37-a2da-b40135d916d0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6fa484d5-9d8a-4c91-8b51-3a3c7a6ef4a0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""19a4c8f5-bdde-41e1-a7cb-98c6d25f89e1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aca7b5e6-3e1c-4fff-a71c-0b14f8562426"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""809684b3-ff1a-40dd-9b59-d59b88e55c01"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd84042b-ebdc-4b80-9e2b-df8726f31f6b"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Knife"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyMouse"",
            ""bindingGroup"": ""KeyMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // LeftPlayer
        m_LeftPlayer = asset.FindActionMap("LeftPlayer", throwIfNotFound: true);
        m_LeftPlayer_Movement = m_LeftPlayer.FindAction("Movement", throwIfNotFound: true);
        m_LeftPlayer_Jump = m_LeftPlayer.FindAction("Jump", throwIfNotFound: true);
        m_LeftPlayer_Attack = m_LeftPlayer.FindAction("Attack", throwIfNotFound: true);
        m_LeftPlayer_Kick = m_LeftPlayer.FindAction("Kick", throwIfNotFound: true);
        m_LeftPlayer_Knife = m_LeftPlayer.FindAction("Knife", throwIfNotFound: true);
        // RightPlayer
        m_RightPlayer = asset.FindActionMap("RightPlayer", throwIfNotFound: true);
        m_RightPlayer_Movement = m_RightPlayer.FindAction("Movement", throwIfNotFound: true);
        m_RightPlayer_Jump = m_RightPlayer.FindAction("Jump", throwIfNotFound: true);
        m_RightPlayer_Attack = m_RightPlayer.FindAction("Attack", throwIfNotFound: true);
        m_RightPlayer_Kick = m_RightPlayer.FindAction("Kick", throwIfNotFound: true);
        m_RightPlayer_Knife = m_RightPlayer.FindAction("Knife", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftPlayer
    private readonly InputActionMap m_LeftPlayer;
    private List<ILeftPlayerActions> m_LeftPlayerActionsCallbackInterfaces = new List<ILeftPlayerActions>();
    private readonly InputAction m_LeftPlayer_Movement;
    private readonly InputAction m_LeftPlayer_Jump;
    private readonly InputAction m_LeftPlayer_Attack;
    private readonly InputAction m_LeftPlayer_Kick;
    private readonly InputAction m_LeftPlayer_Knife;
    public struct LeftPlayerActions
    {
        private @Controls m_Wrapper;
        public LeftPlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_LeftPlayer_Movement;
        public InputAction @Jump => m_Wrapper.m_LeftPlayer_Jump;
        public InputAction @Attack => m_Wrapper.m_LeftPlayer_Attack;
        public InputAction @Kick => m_Wrapper.m_LeftPlayer_Kick;
        public InputAction @Knife => m_Wrapper.m_LeftPlayer_Knife;
        public InputActionMap Get() { return m_Wrapper.m_LeftPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ILeftPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Kick.started += instance.OnKick;
            @Kick.performed += instance.OnKick;
            @Kick.canceled += instance.OnKick;
            @Knife.started += instance.OnKnife;
            @Knife.performed += instance.OnKnife;
            @Knife.canceled += instance.OnKnife;
        }

        private void UnregisterCallbacks(ILeftPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Kick.started -= instance.OnKick;
            @Kick.performed -= instance.OnKick;
            @Kick.canceled -= instance.OnKick;
            @Knife.started -= instance.OnKnife;
            @Knife.performed -= instance.OnKnife;
            @Knife.canceled -= instance.OnKnife;
        }

        public void RemoveCallbacks(ILeftPlayerActions instance)
        {
            if (m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftPlayerActions @LeftPlayer => new LeftPlayerActions(this);

    // RightPlayer
    private readonly InputActionMap m_RightPlayer;
    private List<IRightPlayerActions> m_RightPlayerActionsCallbackInterfaces = new List<IRightPlayerActions>();
    private readonly InputAction m_RightPlayer_Movement;
    private readonly InputAction m_RightPlayer_Jump;
    private readonly InputAction m_RightPlayer_Attack;
    private readonly InputAction m_RightPlayer_Kick;
    private readonly InputAction m_RightPlayer_Knife;
    public struct RightPlayerActions
    {
        private @Controls m_Wrapper;
        public RightPlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_RightPlayer_Movement;
        public InputAction @Jump => m_Wrapper.m_RightPlayer_Jump;
        public InputAction @Attack => m_Wrapper.m_RightPlayer_Attack;
        public InputAction @Kick => m_Wrapper.m_RightPlayer_Kick;
        public InputAction @Knife => m_Wrapper.m_RightPlayer_Knife;
        public InputActionMap Get() { return m_Wrapper.m_RightPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IRightPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Kick.started += instance.OnKick;
            @Kick.performed += instance.OnKick;
            @Kick.canceled += instance.OnKick;
            @Knife.started += instance.OnKnife;
            @Knife.performed += instance.OnKnife;
            @Knife.canceled += instance.OnKnife;
        }

        private void UnregisterCallbacks(IRightPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Kick.started -= instance.OnKick;
            @Kick.performed -= instance.OnKick;
            @Kick.canceled -= instance.OnKick;
            @Knife.started -= instance.OnKnife;
            @Knife.performed -= instance.OnKnife;
            @Knife.canceled -= instance.OnKnife;
        }

        public void RemoveCallbacks(IRightPlayerActions instance)
        {
            if (m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_RightPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightPlayerActions @RightPlayer => new RightPlayerActions(this);
    private int m_KeyMouseSchemeIndex = -1;
    public InputControlScheme KeyMouseScheme
    {
        get
        {
            if (m_KeyMouseSchemeIndex == -1) m_KeyMouseSchemeIndex = asset.FindControlSchemeIndex("KeyMouse");
            return asset.controlSchemes[m_KeyMouseSchemeIndex];
        }
    }
    public interface ILeftPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
        void OnKnife(InputAction.CallbackContext context);
    }
    public interface IRightPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
        void OnKnife(InputAction.CallbackContext context);
    }
}
